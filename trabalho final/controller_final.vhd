-- Net Controller - IOPT
-- Automatic code generated by IOPT2VHDL XSLT transformation.
-- by GRES Research Group - 2014 


Library IEEE;
Use IEEE.STD_LOGIC_1164.ALL;
Use IEEE.STD_LOGIC_ARITH.ALL;
Use IEEE.STD_LOGIC_UNSIGNED.ALL;


Entity Controller_final IS
Port(
    Clk : IN STD_LOGIC;
    PRES1_IN_1 : IN STD_LOGIC;
    TICKET_IN_1 : IN STD_LOGIC;
    PRES2_IN_1 : IN STD_LOGIC;
    PRES1_OUT_1 : IN STD_LOGIC;
    PRES2_OUT_1 : IN STD_LOGIC;
    TICKET_OUT_1 : IN STD_LOGIC;
    hora_entrada_OK : IN STD_LOGIC;
    hora_saida_OK : IN STD_LOGIC;
    PRES1_IN_2 : IN STD_LOGIC;
    PRES2_IN_2 : IN STD_LOGIC;
    TICKET_IN_2 : IN STD_LOGIC;
    PRES1_OUT_2 : IN STD_LOGIC;
    PRES2_OUT_2 : IN STD_LOGIC;
    TICKET_OUT_2 : IN STD_LOGIC;
    AND_12a : IN STD_LOGIC;
    AND_12b : IN STD_LOGIC;
    AND_21a : IN STD_LOGIC;
    AND_21b : IN STD_LOGIC;
    CANC_IN_1 : OUT STD_LOGIC;
    lugares_livres : OUT INTEGER RANGE 0 TO 8;
    lugares_preenchidos : OUT INTEGER RANGE 0 TO 8;
    CANC_OUT_1 : OUT STD_LOGIC;
    CANC_IN_2 : OUT STD_LOGIC;
    CANC_OUT_2 : OUT STD_LOGIC;
    piso1 : OUT INTEGER RANGE 0 TO 8;
    piso2 : OUT INTEGER RANGE 0 TO 8;
    PERIGO : OUT STD_LOGIC;
    parque_cheio : OUT STD_LOGIC;
    rampa1_ocupada : OUT STD_LOGIC;
    rampa2_ocupada : OUT STD_LOGIC;
    Enable : IN STD_LOGIC;
    Reset : IN STD_LOGIC
);
End Controller_final;

Architecture Structural OF Controller_final IS

    Signal p_2: INTEGER RANGE 0 TO 1 := 1;
    Signal p_5: INTEGER RANGE 0 TO 1 := 0;
    Signal p_12: INTEGER RANGE 0 TO 8 := 8;
    Signal p_14: INTEGER RANGE 0 TO 8 := 0;
    Signal p_16: INTEGER RANGE 0 TO 1 := 0;
    Signal p_20: INTEGER RANGE 0 TO 1 := 0;
    Signal p_24: INTEGER RANGE 0 TO 1 := 0;
    Signal p_36: INTEGER RANGE 0 TO 1 := 1;
    Signal p_40: INTEGER RANGE 0 TO 1 := 0;
    Signal p_49: INTEGER RANGE 0 TO 1 := 0;
    Signal p_53: INTEGER RANGE 0 TO 1 := 0;
    Signal p_57: INTEGER RANGE 0 TO 1 := 0;
    Signal p_64: INTEGER RANGE 0 TO 1 := 0;
    Signal p_68: INTEGER RANGE 0 TO 1 := 0;
    Signal p_72: INTEGER RANGE 0 TO 1 := 1;
    Signal p_75: INTEGER RANGE 0 TO 1 := 0;
    Signal p_82: INTEGER RANGE 0 TO 1 := 0;
    Signal p_88: INTEGER RANGE 0 TO 1 := 0;
    Signal p_96: INTEGER RANGE 0 TO 1 := 0;
    Signal p_100: INTEGER RANGE 0 TO 1 := 0;
    Signal p_107: INTEGER RANGE 0 TO 1 := 1;
    Signal p_110: INTEGER RANGE 0 TO 1 := 0;
    Signal p_117: INTEGER RANGE 0 TO 1 := 0;
    Signal p_123: INTEGER RANGE 0 TO 1 := 0;
    Signal p_127: INTEGER RANGE 0 TO 1 := 0;
    Signal p_131: INTEGER RANGE 0 TO 1 := 0;
    Signal p_164: INTEGER RANGE 0 TO 8 := 0;
    Signal p_168: INTEGER RANGE 0 TO 1 := 0;
    Signal p_172: INTEGER RANGE 0 TO 8 := 0;
    Signal p_177: INTEGER RANGE 0 TO 1 := 0;
    Signal p_184: INTEGER RANGE 0 TO 1 := 0;
    Signal p_192: INTEGER RANGE 0 TO 1 := 0;
    Signal p_196: INTEGER RANGE 0 TO 1 := 0;
    Signal p_203: INTEGER RANGE 0 TO 1 := 0;
    Signal p_213: INTEGER RANGE 0 TO 1 := 0;
    Signal p_220: INTEGER RANGE 0 TO 1 := 0;
    Signal p_229: INTEGER RANGE 0 TO 1 := 1;
    Signal p_233: INTEGER RANGE 0 TO 1 := 0;
    Signal p_235: INTEGER RANGE 0 TO 1 := 0;
    Signal p_246: INTEGER RANGE 0 TO 1 := 0;
    Signal p_257: INTEGER RANGE 0 TO 1 := 0;
    Signal p_268: INTEGER RANGE 0 TO 1 := 0;
    Signal p_274: INTEGER RANGE 0 TO 1 := 1;


    Signal s_CANC_IN_1 : STD_LOGIC := '0';
    Signal s_lugares_livres : INTEGER RANGE 0 TO 8 := 0;
    Signal s_lugares_preenchidos : INTEGER RANGE 0 TO 8 := 0;
    Signal s_CANC_OUT_1 : STD_LOGIC := '0';
    Signal s_CANC_IN_2 : STD_LOGIC := '0';
    Signal s_CANC_OUT_2 : STD_LOGIC := '0';
    Signal s_piso1 : INTEGER RANGE 0 TO 8 := 0;
    Signal s_piso2 : INTEGER RANGE 0 TO 8 := 0;
    Signal s_PERIGO : STD_LOGIC := '0';
    Signal s_parque_cheio : STD_LOGIC := '0';
    Signal s_rampa1_ocupada : STD_LOGIC := '0';
    Signal s_rampa2_ocupada : STD_LOGIC := '0';

    -- Array implementation:

Begin
    -- Selected array items:

    proc_in_events: PROCESS( Clk, Enable ) IS
    Begin
      If falling_edge(Clk) Then
        If Reset = '0' AND Enable = '1' Then
        End If;
      End If;
    End PROCESS;


    proc_transitions: PROCESS( Clk, Enable, Reset ) IS
      Variable p_2_add, p_2_avail : INTEGER RANGE 0 to 1;
      Variable p_5_add, p_5_avail : INTEGER RANGE 0 to 1;
      Variable p_12_add, p_12_avail : INTEGER RANGE 0 to 8;
      Variable p_14_add, p_14_avail : INTEGER RANGE 0 to 8;
      Variable p_16_add, p_16_avail : INTEGER RANGE 0 to 1;
      Variable p_20_add, p_20_avail : INTEGER RANGE 0 to 1;
      Variable p_24_add, p_24_avail : INTEGER RANGE 0 to 1;
      Variable p_36_add, p_36_avail : INTEGER RANGE 0 to 1;
      Variable p_40_add, p_40_avail : INTEGER RANGE 0 to 1;
      Variable p_49_add, p_49_avail : INTEGER RANGE 0 to 1;
      Variable p_53_add, p_53_avail : INTEGER RANGE 0 to 1;
      Variable p_57_add, p_57_avail : INTEGER RANGE 0 to 1;
      Variable p_64_add, p_64_avail : INTEGER RANGE 0 to 1;
      Variable p_68_add, p_68_avail : INTEGER RANGE 0 to 1;
      Variable p_72_add, p_72_avail : INTEGER RANGE 0 to 1;
      Variable p_75_add, p_75_avail : INTEGER RANGE 0 to 1;
      Variable p_82_add, p_82_avail : INTEGER RANGE 0 to 1;
      Variable p_88_add, p_88_avail : INTEGER RANGE 0 to 1;
      Variable p_96_add, p_96_avail : INTEGER RANGE 0 to 1;
      Variable p_100_add, p_100_avail : INTEGER RANGE 0 to 1;
      Variable p_107_add, p_107_avail : INTEGER RANGE 0 to 1;
      Variable p_110_add, p_110_avail : INTEGER RANGE 0 to 1;
      Variable p_117_add, p_117_avail : INTEGER RANGE 0 to 1;
      Variable p_123_add, p_123_avail : INTEGER RANGE 0 to 1;
      Variable p_127_add, p_127_avail : INTEGER RANGE 0 to 1;
      Variable p_131_add, p_131_avail : INTEGER RANGE 0 to 1;
      Variable p_164_add, p_164_avail : INTEGER RANGE 0 to 8;
      Variable p_168_add, p_168_avail : INTEGER RANGE 0 to 1;
      Variable p_172_add, p_172_avail : INTEGER RANGE 0 to 8;
      Variable p_177_add, p_177_avail : INTEGER RANGE 0 to 1;
      Variable p_184_add, p_184_avail : INTEGER RANGE 0 to 1;
      Variable p_192_add, p_192_avail : INTEGER RANGE 0 to 1;
      Variable p_196_add, p_196_avail : INTEGER RANGE 0 to 1;
      Variable p_203_add, p_203_avail : INTEGER RANGE 0 to 1;
      Variable p_213_add, p_213_avail : INTEGER RANGE 0 to 1;
      Variable p_220_add, p_220_avail : INTEGER RANGE 0 to 1;
      Variable p_229_add, p_229_avail : INTEGER RANGE 0 to 1;
      Variable p_233_add, p_233_avail : INTEGER RANGE 0 to 1;
      Variable p_235_add, p_235_avail : INTEGER RANGE 0 to 1;
      Variable p_246_add, p_246_avail : INTEGER RANGE 0 to 1;
      Variable p_257_add, p_257_avail : INTEGER RANGE 0 to 1;
      Variable p_268_add, p_268_avail : INTEGER RANGE 0 to 1;
      Variable p_274_add, p_274_avail : INTEGER RANGE 0 to 1;
    Begin
      If Reset = '1' Then
          p_2 <= 1;
          p_5 <= 0;
          p_12 <= 8;
          p_14 <= 0;
          p_16 <= 0;
          p_20 <= 0;
          p_24 <= 0;
          p_36 <= 1;
          p_40 <= 0;
          p_49 <= 0;
          p_53 <= 0;
          p_57 <= 0;
          p_64 <= 0;
          p_68 <= 0;
          p_72 <= 1;
          p_75 <= 0;
          p_82 <= 0;
          p_88 <= 0;
          p_96 <= 0;
          p_100 <= 0;
          p_107 <= 1;
          p_110 <= 0;
          p_117 <= 0;
          p_123 <= 0;
          p_127 <= 0;
          p_131 <= 0;
          p_164 <= 0;
          p_168 <= 0;
          p_172 <= 0;
          p_177 <= 0;
          p_184 <= 0;
          p_192 <= 0;
          p_196 <= 0;
          p_203 <= 0;
          p_213 <= 0;
          p_220 <= 0;
          p_229 <= 1;
          p_233 <= 0;
          p_235 <= 0;
          p_246 <= 0;
          p_257 <= 0;
          p_268 <= 0;
          p_274 <= 1;
      Elsif rising_edge(Clk) Then
        If Enable = '1' Then
          p_2_avail := p_2;
          p_2_add := 0;   -- entrada_livre_1;
          p_5_avail := p_5;
          p_5_add := 0;   -- carro_na_entrada 1;
          p_12_avail := p_12;
          p_12_add := 0;   -- Lugares_vazios;
          p_14_avail := p_14;
          p_14_add := 0;   -- lugares_ocupados;
          p_16_avail := p_16;
          p_16_add := 0;   -- cancela_aberta_1;
          p_20_avail := p_20;
          p_20_add := 0;   -- A_entrar_1;
          p_24_avail := p_24;
          p_24_add := 0;   -- passou_canc_entrada_1;
          p_36_avail := p_36;
          p_36_add := 0;   -- saida_livre_1;
          p_40_avail := p_40;
          p_40_add := 0;   -- carro_na_saida_1;
          p_49_avail := p_49;
          p_49_add := 0;   -- canc_saida_aberta_1;
          p_53_avail := p_53;
          p_53_add := 0;   -- A_sair_1;
          p_57_avail := p_57;
          p_57_add := 0;   -- passou_canc_saida_1;
          p_64_avail := p_64;
          p_64_add := 0;   -- saida_1_OK;
          p_68_avail := p_68;
          p_68_add := 0;   -- entrada_1_validada;
          p_72_avail := p_72;
          p_72_add := 0;   -- entrada_livre_2;
          p_75_avail := p_75;
          p_75_add := 0;   -- carro_na_entrada_2;
          p_82_avail := p_82;
          p_82_add := 0;   -- entrada_2_validada;
          p_88_avail := p_88;
          p_88_add := 0;   -- cancela_aberta_2;
          p_96_avail := p_96;
          p_96_add := 0;   -- A_entrar_2;
          p_100_avail := p_100;
          p_100_add := 0;   -- passou_canc_entrada_2;
          p_107_avail := p_107;
          p_107_add := 0;   -- saida_livre_2;
          p_110_avail := p_110;
          p_110_add := 0;   -- carro_na_saida_2;
          p_117_avail := p_117;
          p_117_add := 0;   -- saida_2_OK;
          p_123_avail := p_123;
          p_123_add := 0;   -- canc_saida_aberta_2;
          p_127_avail := p_127;
          p_127_add := 0;   -- A_sair_2;
          p_131_avail := p_131;
          p_131_add := 0;   -- passou_canc_saida_2;
          p_164_avail := p_164;
          p_164_add := 0;   -- Piso_1;
          p_168_avail := p_168;
          p_168_add := 0;   -- IN_rampa_UP_1;
          p_172_avail := p_172;
          p_172_add := 0;   -- piso_2;
          p_177_avail := p_177;
          p_177_add := 0;   -- IN_rampa_DOWN_1;
          p_184_avail := p_184;
          p_184_add := 0;   -- contramao_UP;
          p_192_avail := p_192;
          p_192_add := 0;   -- IN_rampa_UP_2;
          p_196_avail := p_196;
          p_196_add := 0;   -- IN_rampa_UP_3;
          p_203_avail := p_203;
          p_203_add := 0;   -- marcha_atras_1;
          p_213_avail := p_213;
          p_213_add := 0;   -- marcha_atras_2;
          p_220_avail := p_220;
          p_220_add := 0;   -- marcha_atras_3;
          p_229_avail := p_229;
          p_229_add := 0;   -- Piso_1_comp;
          p_233_avail := p_233;
          p_233_add := 0;   -- IN_RAMPA_DOWN_2;
          p_235_avail := p_235;
          p_235_add := 0;   -- IN_RAMPA_DOWN_3;
          p_246_avail := p_246;
          p_246_add := 0;   -- marcha_atras_4;
          p_257_avail := p_257;
          p_257_add := 0;   -- marcha_atras_5;
          p_268_avail := p_268;
          p_268_add := 0;   -- contramao_down;
          p_274_avail := p_274;
          p_274_add := 0;   -- Piso_1_comp;


          -- Transition 3 - sensor_1_ON_entrada_1
          If (p_2_avail >= 1) and 
             (conv_integer(PRES1_IN_1) = 1) -- guard expr 
          Then
              p_2_avail := p_2_avail - 1;    -- entrada_livre_1
              p_5_add := p_5_add + 1;   -- carro_na_entrada 1
          End If;

          -- Transition 7 - sensor_1_OFF_entrada_11
          If (p_5_avail >= 1) and 
             (conv_integer(PRES1_IN_1) = 0) -- guard expr 
          Then
              p_5_avail := p_5_avail - 1;    -- carro_na_entrada 1
              p_2_add := p_2_add + 1;   -- entrada_livre_1
          End If;

          -- Transition 10 - Botao_Ticket_IN_1
          If (p_12_avail >= 1) and
             (p_68_avail >= 1) and 
             (conv_integer(TICKET_IN_1) = 1) -- guard expr 
          Then
              p_12_avail := p_12_avail - 1;    -- Lugares_vazios
              p_68_avail := p_68_avail - 1;    -- entrada_1_validada
              p_14_add := p_14_add + 1;   -- lugares_ocupados
              p_16_add := p_16_add + 1;   -- cancela_aberta_1
              p_164_add := p_164_add + 1;   -- Piso_1
          End If;

          -- Transition 18 - sensor_2_entrada_1
          If (p_16_avail >= 1) and 
             (conv_integer(PRES2_IN_1) = 1) -- guard expr 
          Then
              p_16_avail := p_16_avail - 1;    -- cancela_aberta_1
              p_20_add := p_20_add + 1;   -- A_entrar_1
          End If;

          -- Transition 22 - passou_cancela_1
          If (p_20_avail >= 1) and 
             (conv_integer(PRES1_IN_1) = 0) -- guard expr 
          Then
              p_20_avail := p_20_avail - 1;    -- A_entrar_1
              p_24_add := p_24_add + 1;   -- passou_canc_entrada_1
          End If;

          -- Transition 26 - Entrou_1
          If (p_24_avail >= 1) and 
             (conv_integer(PRES2_IN_1) = 0) -- guard expr 
          Then
              p_24_avail := p_24_avail - 1;    -- passou_canc_entrada_1
              p_2_add := p_2_add + 1;   -- entrada_livre_1
          End If;

          -- Transition 32 - abortou_entrada_1
          If (p_16_avail >= 1) and
             (p_14_avail >= 1) and 
             (conv_integer(PRES1_IN_1) = 0) -- guard expr 
          Then
              p_16_avail := p_16_avail - 1;    -- cancela_aberta_1
              p_14_avail := p_14_avail - 1;    -- lugares_ocupados
              p_2_add := p_2_add + 1;   -- entrada_livre_1
              p_12_add := p_12_add + 1;   -- Lugares_vazios
          End If;

          -- Transition 37 - sensor_1_ON_saida_1
          If (p_36_avail >= 1) and
             (p_164_avail >= 1) and 
             (conv_integer(PRES1_OUT_1) = 1) -- guard expr 
          Then
              p_36_avail := p_36_avail - 1;    -- saida_livre_1
              p_164_avail := p_164_avail - 1;    -- Piso_1
              p_40_add := p_40_add + 1;   -- carro_na_saida_1
          End If;

          -- Transition 42 - Botao_Ticket_OUT_1
          If (p_14_avail >= 1) and
             (p_64_avail >= 1) and 
             (conv_integer(TICKET_OUT_1) = 1) -- guard expr 
          Then
              p_14_avail := p_14_avail - 1;    -- lugares_ocupados
              p_64_avail := p_64_avail - 1;    -- saida_1_OK
              p_12_add := p_12_add + 1;   -- Lugares_vazios
              p_49_add := p_49_add + 1;   -- canc_saida_aberta_1
          End If;

          -- Transition 46 - sensor_1_OFF_saida_1
          If (p_40_avail >= 1) and 
             (conv_integer(PRES1_OUT_1) = 0) -- guard expr 
          Then
              p_40_avail := p_40_avail - 1;    -- carro_na_saida_1
              p_36_add := p_36_add + 1;   -- saida_livre_1
          End If;

          -- Transition 51 - sensor_2_saida_1
          If (p_49_avail >= 1) and 
             (conv_integer(PRES2_OUT_1) = 1) -- guard expr 
          Then
              p_49_avail := p_49_avail - 1;    -- canc_saida_aberta_1
              p_53_add := p_53_add + 1;   -- A_sair_1
          End If;

          -- Transition 55 - passou_cancela_saida_1
          If (p_53_avail >= 1) and 
             (conv_integer(PRES1_OUT_1) = 0) -- guard expr 
          Then
              p_53_avail := p_53_avail - 1;    -- A_sair_1
              p_57_add := p_57_add + 1;   -- passou_canc_saida_1
          End If;

          -- Transition 59 - saiu_1
          If (p_57_avail >= 1) and 
             (conv_integer(PRES2_OUT_1) = 0) -- guard expr 
          Then
              p_57_avail := p_57_avail - 1;    -- passou_canc_saida_1
              p_36_add := p_36_add + 1;   -- saida_livre_1
          End If;

          -- Transition 62 - saida_1_valida
          If (p_40_avail >= 1) and 
             (conv_integer(hora_saida_OK) = 1) -- guard expr 
          Then
              p_40_avail := p_40_avail - 1;    -- carro_na_saida_1
              p_64_add := p_64_add + 1;   -- saida_1_OK
          End If;

          -- Transition 67 - entrada_1_valida
          If (p_5_avail >= 1) and 
             (conv_integer(hora_entrada_OK) = 1) -- guard expr 
          Then
              p_5_avail := p_5_avail - 1;    -- carro_na_entrada 1
              p_68_add := p_68_add + 1;   -- entrada_1_validada
          End If;

          -- Transition 73 - sensor_1_ON_entrada_2
          If (p_72_avail >= 1) and 
             (conv_integer(PRES1_IN_2) = 1) -- guard expr 
          Then
              p_72_avail := p_72_avail - 1;    -- entrada_livre_2
              p_75_add := p_75_add + 1;   -- carro_na_entrada_2
          End If;

          -- Transition 77 - sensor_1_OFF_entrada_2
          If (p_75_avail >= 1) and 
             (conv_integer(PRES1_IN_2) = 0) -- guard expr 
          Then
              p_75_avail := p_75_avail - 1;    -- carro_na_entrada_2
              p_72_add := p_72_add + 1;   -- entrada_livre_2
          End If;

          -- Transition 80 - entrada_2_valida
          If (p_75_avail >= 1) and 
             (conv_integer(hora_entrada_OK) = 1) -- guard expr 
          Then
              p_75_avail := p_75_avail - 1;    -- carro_na_entrada_2
              p_82_add := p_82_add + 1;   -- entrada_2_validada
          End If;

          -- Transition 84 - botao_ticket_IN_2
          If (p_82_avail >= 1) and
             (p_12_avail >= 1) and 
             (conv_integer(TICKET_IN_2) = 1) -- guard expr 
          Then
              p_82_avail := p_82_avail - 1;    -- entrada_2_validada
              p_12_avail := p_12_avail - 1;    -- Lugares_vazios
              p_14_add := p_14_add + 1;   -- lugares_ocupados
              p_88_add := p_88_add + 1;   -- cancela_aberta_2
              p_172_add := p_172_add + 1;   -- piso_2
          End If;

          -- Transition 90 - abortou_entrada_2
          If (p_88_avail >= 1) and
             (p_14_avail >= 1) and 
             (conv_integer(PRES1_IN_2) = 0) -- guard expr 
          Then
              p_88_avail := p_88_avail - 1;    -- cancela_aberta_2
              p_14_avail := p_14_avail - 1;    -- lugares_ocupados
              p_72_add := p_72_add + 1;   -- entrada_livre_2
              p_12_add := p_12_add + 1;   -- Lugares_vazios
          End If;

          -- Transition 94 - sensor_2_entrada_2
          If (p_88_avail >= 1) and 
             (conv_integer(PRES2_IN_2) = 1) -- guard expr 
          Then
              p_88_avail := p_88_avail - 1;    -- cancela_aberta_2
              p_96_add := p_96_add + 1;   -- A_entrar_2
          End If;

          -- Transition 98 - passou_cancela_2
          If (p_96_avail >= 1) and 
             (conv_integer(PRES1_IN_2) = 0) -- guard expr 
          Then
              p_96_avail := p_96_avail - 1;    -- A_entrar_2
              p_100_add := p_100_add + 1;   -- passou_canc_entrada_2
          End If;

          -- Transition 102 - Entrou_2
          If (p_100_avail >= 1) and 
             (conv_integer(PRES2_IN_2) = 0) -- guard expr 
          Then
              p_100_avail := p_100_avail - 1;    -- passou_canc_entrada_2
              p_72_add := p_72_add + 1;   -- entrada_livre_2
          End If;

          -- Transition 108 - sensor_1_ON_saida_2
          If (p_107_avail >= 1) and
             (p_172_avail >= 1) and 
             (conv_integer(PRES1_OUT_2) = 1) -- guard expr 
          Then
              p_107_avail := p_107_avail - 1;    -- saida_livre_2
              p_172_avail := p_172_avail - 1;    -- piso_2
              p_110_add := p_110_add + 1;   -- carro_na_saida_2
          End If;

          -- Transition 111 - sensor_1_OFF_saida_21
          If (p_110_avail >= 1) and 
             (conv_integer(PRES1_OUT_2) = 0) -- guard expr 
          Then
              p_110_avail := p_110_avail - 1;    -- carro_na_saida_2
              p_107_add := p_107_add + 1;   -- saida_livre_2
          End If;

          -- Transition 115 - saida_2_valida
          If (p_110_avail >= 1) and 
             (conv_integer(hora_saida_OK) = 1) -- guard expr 
          Then
              p_110_avail := p_110_avail - 1;    -- carro_na_saida_2
              p_117_add := p_117_add + 1;   -- saida_2_OK
          End If;

          -- Transition 119 - Botao_Ticket_OUT_2
          If (p_117_avail >= 1) and
             (p_14_avail >= 1) and 
             (conv_integer(TICKET_OUT_2) = 1) -- guard expr 
          Then
              p_117_avail := p_117_avail - 1;    -- saida_2_OK
              p_14_avail := p_14_avail - 1;    -- lugares_ocupados
              p_12_add := p_12_add + 1;   -- Lugares_vazios
              p_123_add := p_123_add + 1;   -- canc_saida_aberta_2
          End If;

          -- Transition 125 - sensor_2_saida_2
          If (p_123_avail >= 1) and 
             (conv_integer(PRES2_OUT_2) = 1) -- guard expr 
          Then
              p_123_avail := p_123_avail - 1;    -- canc_saida_aberta_2
              p_127_add := p_127_add + 1;   -- A_sair_2
          End If;

          -- Transition 129 - passou_cancela_saida_2
          If (p_127_avail >= 1) and 
             (conv_integer(PRES1_OUT_2) = 0) -- guard expr 
          Then
              p_127_avail := p_127_avail - 1;    -- A_sair_2
              p_131_add := p_131_add + 1;   -- passou_canc_saida_2
          End If;

          -- Transition 133 - saiu_2
          If (p_131_avail >= 1) and 
             (conv_integer(PRES2_OUT_2) = 0) -- guard expr 
          Then
              p_131_avail := p_131_avail - 1;    -- passou_canc_saida_2
              p_107_add := p_107_add + 1;   -- saida_livre_2
          End If;

          -- Transition 136 - sensor1_OFF_saida_22
          If (p_117_avail >= 1) and 
             (conv_integer(PRES1_OUT_2) = 0) -- guard expr 
          Then
              p_117_avail := p_117_avail - 1;    -- saida_2_OK
              p_107_add := p_107_add + 1;   -- saida_livre_2
          End If;

          -- Transition 139 - sensor_1_OFF_entrada_12
          If (p_68_avail >= 1) and 
             (conv_integer(PRES1_IN_1) = 0) -- guard expr 
          Then
              p_68_avail := p_68_avail - 1;    -- entrada_1_validada
              p_2_add := p_2_add + 1;   -- entrada_livre_1
          End If;

          -- Transition 142 - sensor_1_OFF_entrada_22
          If (p_82_avail >= 1) and 
             (conv_integer(PRES1_IN_2) = 0) -- guard expr 
          Then
              p_82_avail := p_82_avail - 1;    -- entrada_2_validada
              p_72_add := p_72_add + 1;   -- entrada_livre_2
          End If;

          -- Transition 145 - sensor_1_OFF_saida_12
          If (p_64_avail >= 1) and 
             (conv_integer(PRES1_OUT_1) = 0) -- guard expr 
          Then
              p_64_avail := p_64_avail - 1;    -- saida_1_OK
              p_36_add := p_36_add + 1;   -- saida_livre_1
          End If;

          -- Transition 166 - sensor_12a
          If (p_164_avail >= 1) and
             (p_229_avail >= 1) and 
             (conv_integer(AND_12a) = 1) -- guard expr 
          Then
              p_164_avail := p_164_avail - 1;    -- Piso_1
              p_229_avail := p_229_avail - 1;    -- Piso_1_comp
              p_168_add := p_168_add + 1;   -- IN_rampa_UP_1
          End If;

          -- Transition 170 - sensor_12b
          If (p_168_avail >= 1) and 
             (conv_integer(AND_12b) = 1) -- guard expr 
          Then
              p_168_avail := p_168_avail - 1;    -- IN_rampa_UP_1
              p_192_add := p_192_add + 1;   -- IN_rampa_UP_2
          End If;

          -- Transition 175 - sensor_21a
          If (p_172_avail >= 1) and
             (p_274_avail >= 1) and 
             (conv_integer(AND_21a) = 1) -- guard expr 
          Then
              p_172_avail := p_172_avail - 1;    -- piso_2
              p_274_avail := p_274_avail - 1;    -- Piso_1_comp
              p_177_add := p_177_add + 1;   -- IN_rampa_DOWN_1
          End If;

          -- Transition 179 - sensor_21b
          If (p_177_avail >= 1) and 
             (conv_integer(AND_21b) = 1) -- guard expr 
          Then
              p_177_avail := p_177_avail - 1;    -- IN_rampa_DOWN_1
              p_233_add := p_233_add + 1;   -- IN_RAMPA_DOWN_2
          End If;

          -- Transition 182 - sensor_21b_P1
          If (p_164_avail >= 1) and 
             (conv_integer(AND_21b) = 1) -- guard expr 
          Then
              p_164_avail := p_164_avail - 1;    -- Piso_1
              p_184_add := p_184_add + 1;   -- contramao_UP
          End If;

          -- Transition 186 - sensor_21b_P1_OFF
          If (p_184_avail >= 1) and 
             (conv_integer(AND_21b) = 0) -- guard expr 
          Then
              p_184_avail := p_184_avail - 1;    -- contramao_UP
              p_164_add := p_164_add + 1;   -- Piso_1
          End If;

          -- Transition 189 - sensor12a_OFF
          If (p_168_avail >= 1) and 
             (conv_integer(AND_12a) = 0) -- guard expr 
          Then
              p_168_avail := p_168_avail - 1;    -- IN_rampa_UP_1
              p_164_add := p_164_add + 1;   -- Piso_1
          End If;

          -- Transition 194 - sensor_12a_passou
          If (p_192_avail >= 1) and 
             (conv_integer(AND_12a) = 0) -- guard expr 
          Then
              p_192_avail := p_192_avail - 1;    -- IN_rampa_UP_2
              p_196_add := p_196_add + 1;   -- IN_rampa_UP_3
          End If;

          -- Transition 198 - sensor_12b_passou
          If (p_196_avail >= 1) and 
             (conv_integer(AND_12b) = 0) -- guard expr 
          Then
              p_196_avail := p_196_avail - 1;    -- IN_rampa_UP_3
              p_172_add := p_172_add + 1;   -- piso_2
              p_229_add := p_229_add + 1;   -- Piso_1_comp
          End If;

          -- Transition 202 - sensor_12b_off
          If (p_192_avail >= 1) and 
             (conv_integer(AND_12b) = 0) -- guard expr 
          Then
              p_192_avail := p_192_avail - 1;    -- IN_rampa_UP_2
              p_203_add := p_203_add + 1;   -- marcha_atras_1
          End If;

          -- Transition 206 - sensor_12b_on_MA
          If (p_203_avail >= 1) and 
             (conv_integer(AND_12b) = 1) -- guard expr 
          Then
              p_203_avail := p_203_avail - 1;    -- marcha_atras_1
              p_192_add := p_192_add + 1;   -- IN_rampa_UP_2
          End If;

          -- Transition 209 - sensor_12a_MA_OFF
          If (p_203_avail >= 1) and 
             (conv_integer(AND_12a) = 0) -- guard expr 
          Then
              p_203_avail := p_203_avail - 1;    -- marcha_atras_1
              p_164_add := p_164_add + 1;   -- Piso_1
          End If;

          -- Transition 212 - sensor_12a_MA
          If (p_196_avail >= 1) and 
             (conv_integer(AND_12a) = 1) -- guard expr 
          Then
              p_196_avail := p_196_avail - 1;    -- IN_rampa_UP_3
              p_213_add := p_213_add + 1;   -- marcha_atras_2
          End If;

          -- Transition 214 - sensor_12a_MA_OFF2
          If (p_213_avail >= 1) and 
             (conv_integer(AND_12a) = 0) -- guard expr 
          Then
              p_213_avail := p_213_avail - 1;    -- marcha_atras_2
              p_196_add := p_196_add + 1;   -- IN_rampa_UP_3
          End If;

          -- Transition 219 - sensor_12b_OFF_MA2
          If (p_213_avail >= 1) and 
             (conv_integer(AND_12b) = 0) -- guard expr 
          Then
              p_213_avail := p_213_avail - 1;    -- marcha_atras_2
              p_220_add := p_220_add + 1;   -- marcha_atras_3
          End If;

          -- Transition 221 - sensor12a_OFF_MA
          If (p_220_avail >= 1) and 
             (conv_integer(AND_12a) = 0) -- guard expr 
          Then
              p_220_avail := p_220_avail - 1;    -- marcha_atras_3
              p_164_add := p_164_add + 1;   -- Piso_1
          End If;

          -- Transition 223 - sensor_12b_ON_MA2
          If (p_220_avail >= 1) and 
             (conv_integer(AND_12b) = 1) -- guard expr 
          Then
              p_220_avail := p_220_avail - 1;    -- marcha_atras_3
              p_213_add := p_213_add + 1;   -- marcha_atras_2
          End If;

          -- Transition 234 - sensor_21a_off
          If (p_233_avail >= 1) and 
             (conv_integer(AND_21a) = 0) -- guard expr 
          Then
              p_233_avail := p_233_avail - 1;    -- IN_RAMPA_DOWN_2
              p_235_add := p_235_add + 1;   -- IN_RAMPA_DOWN_3
          End If;

          -- Transition 236 - sensor_21b_off
          If (p_235_avail >= 1) and 
             (conv_integer(AND_21b) = 0) -- guard expr 
          Then
              p_235_avail := p_235_avail - 1;    -- IN_RAMPA_DOWN_3
              p_164_add := p_164_add + 1;   -- Piso_1
              p_274_add := p_274_add + 1;   -- Piso_1_comp
          End If;

          -- Transition 242 - sensor_21a_off
          If (p_177_avail >= 1) and 
             (conv_integer(AND_21a) = 0) -- guard expr 
          Then
              p_177_avail := p_177_avail - 1;    -- IN_rampa_DOWN_1
              p_172_add := p_172_add + 1;   -- piso_2
          End If;

          -- Transition 245 - sensor_21b_OFF_MA
          If (p_233_avail >= 1) and
             (p_257_avail >= 1) and 
             (conv_integer(AND_21b) = 0) -- guard expr 
          Then
              p_233_avail := p_233_avail - 1;    -- IN_RAMPA_DOWN_2
              p_257_avail := p_257_avail - 1;    -- marcha_atras_5
              p_246_add := p_246_add + 1;   -- marcha_atras_4
          End If;

          -- Transition 247 - sensor_21b_ON_MA
          If (p_246_avail >= 1) and 
             (conv_integer(AND_21b) = 1) -- guard expr 
          Then
              p_246_avail := p_246_avail - 1;    -- marcha_atras_4
              p_233_add := p_233_add + 1;   -- IN_RAMPA_DOWN_2
          End If;

          -- Transition 252 - sensor_21a_OFF_MA
          If (p_246_avail >= 1) and 
             (conv_integer(AND_21b) = 0) -- guard expr 
          Then
              p_246_avail := p_246_avail - 1;    -- marcha_atras_4
              p_172_add := p_172_add + 1;   -- piso_2
          End If;

          -- Transition 255 - sensor_21aON_MA
          If (p_235_avail >= 1) and 
             (conv_integer(AND_21a) = 1) -- guard expr 
          Then
              p_235_avail := p_235_avail - 1;    -- IN_RAMPA_DOWN_3
              p_257_add := p_257_add + 1;   -- marcha_atras_5
          End If;

          -- Transition 259 - sensor_21a_OFF_MA
          If (p_257_avail >= 1) and 
             (conv_integer(AND_21a) = 0) -- guard expr 
          Then
              p_257_avail := p_257_avail - 1;    -- marcha_atras_5
              p_235_add := p_235_add + 1;   -- IN_RAMPA_DOWN_3
          End If;

          -- Transition 267 - sensor_12b_P2
          If (p_172_avail >= 1) and 
             (conv_integer(AND_12b) = 1 AND conv_integer(s_rampa1_ocupada) = 0) -- guard expr 
          Then
              p_172_avail := p_172_avail - 1;    -- piso_2
              p_268_add := p_268_add + 1;   -- contramao_down
          End If;

          -- Transition 269 - sensor_12b_P2_OFF
          If (p_268_avail >= 1) and 
             (conv_integer(AND_12b) = 0) -- guard expr 
          Then
              p_268_avail := p_268_avail - 1;    -- contramao_down
              p_172_add := p_172_add + 1;   -- piso_2
          End If;

          -- Calculate final place marking:
          p_2 <= p_2_avail + p_2_add;
          p_5 <= p_5_avail + p_5_add;
          p_12 <= p_12_avail + p_12_add;
          p_14 <= p_14_avail + p_14_add;
          p_16 <= p_16_avail + p_16_add;
          p_20 <= p_20_avail + p_20_add;
          p_24 <= p_24_avail + p_24_add;
          p_36 <= p_36_avail + p_36_add;
          p_40 <= p_40_avail + p_40_add;
          p_49 <= p_49_avail + p_49_add;
          p_53 <= p_53_avail + p_53_add;
          p_57 <= p_57_avail + p_57_add;
          p_64 <= p_64_avail + p_64_add;
          p_68 <= p_68_avail + p_68_add;
          p_72 <= p_72_avail + p_72_add;
          p_75 <= p_75_avail + p_75_add;
          p_82 <= p_82_avail + p_82_add;
          p_88 <= p_88_avail + p_88_add;
          p_96 <= p_96_avail + p_96_add;
          p_100 <= p_100_avail + p_100_add;
          p_107 <= p_107_avail + p_107_add;
          p_110 <= p_110_avail + p_110_add;
          p_117 <= p_117_avail + p_117_add;
          p_123 <= p_123_avail + p_123_add;
          p_127 <= p_127_avail + p_127_add;
          p_131 <= p_131_avail + p_131_add;
          p_164 <= p_164_avail + p_164_add;
          p_168 <= p_168_avail + p_168_add;
          p_172 <= p_172_avail + p_172_add;
          p_177 <= p_177_avail + p_177_add;
          p_184 <= p_184_avail + p_184_add;
          p_192 <= p_192_avail + p_192_add;
          p_196 <= p_196_avail + p_196_add;
          p_203 <= p_203_avail + p_203_add;
          p_213 <= p_213_avail + p_213_add;
          p_220 <= p_220_avail + p_220_add;
          p_229 <= p_229_avail + p_229_add;
          p_233 <= p_233_avail + p_233_add;
          p_235 <= p_235_avail + p_235_add;
          p_246 <= p_246_avail + p_246_add;
          p_257 <= p_257_avail + p_257_add;
          p_268 <= p_268_avail + p_268_add;
          p_274 <= p_274_avail + p_274_add;

          -- Apply output events to ouput signals:

          -- Calculate transition-action-output final values:
        End If;
      End If;
    End PROCESS;


    proc_place_outputs: PROCESS( Clk, Enable ) IS
    Variable exp_res, new_value: Integer;
    Begin
      If rising_edge(Clk) Then
        If Reset='1' Then
          s_CANC_IN_1 <= '0';
          s_lugares_livres <= 0;
          s_lugares_preenchidos <= 0;
          s_CANC_OUT_1 <= '0';
          s_CANC_IN_2 <= '0';
          s_CANC_OUT_2 <= '0';
          s_piso1 <= 0;
          s_piso2 <= 0;
          s_PERIGO <= '0';
          s_parque_cheio <= '0';
          s_rampa1_ocupada <= '0';
          s_rampa2_ocupada <= '0';

        Elsif Enable='1' Then

          -- Signal CANC_IN_1 default value:
          new_value := 0;

          -- CANC_IN_1 action on place A_entrar_1(p_20)
          If p_20 > 0 Then
            exp_res := 1;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_IN_1 action on place cancela_aberta_1(p_16)
          If p_16 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_IN_1 action on place entrada_livre_1(p_2)
          If p_2 > 0 Then
            exp_res := 0;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_IN_1 action on place passou_canc_entrada_1(p_24)
          If p_24 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- Store CANC_IN_1 and check result range:
          If new_value < 0 Then s_CANC_IN_1 <= '0';
            Elsif new_value > 1 Then s_CANC_IN_1 <= '1';
            Else s_CANC_IN_1 <= conv_std_logic_vector(new_value,1)(0);
          End If;

          -- Signal lugares_livres default value:
          new_value := 0;

          -- lugares_livres action on place Lugares_vazios(p_12)
          If p_12 > 0 Then
            exp_res := p_12;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- Store lugares_livres and check result range:
          If new_value < 0 Then s_lugares_livres <= 0;
            Elsif new_value > 8 Then s_lugares_livres <= 8;
            Else s_lugares_livres <= new_value;
          End If;

          -- Signal lugares_preenchidos default value:
          new_value := 0;

          -- lugares_preenchidos action on place lugares_ocupados(p_14)
          If p_14 > 0 Then
            exp_res := p_14;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- Store lugares_preenchidos and check result range:
          If new_value < 0 Then s_lugares_preenchidos <= 0;
            Elsif new_value > 8 Then s_lugares_preenchidos <= 8;
            Else s_lugares_preenchidos <= new_value;
          End If;

          -- Signal CANC_OUT_1 default value:
          new_value := 0;

          -- CANC_OUT_1 action on place A_sair_1(p_53)
          If p_53 > 0 Then
            exp_res := 1;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_OUT_1 action on place canc_saida_aberta_1(p_49)
          If p_49 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_OUT_1 action on place passou_canc_saida_1(p_57)
          If p_57 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- Store CANC_OUT_1 and check result range:
          If new_value < 0 Then s_CANC_OUT_1 <= '0';
            Elsif new_value > 1 Then s_CANC_OUT_1 <= '1';
            Else s_CANC_OUT_1 <= conv_std_logic_vector(new_value,1)(0);
          End If;

          -- Signal CANC_IN_2 default value:
          new_value := 0;

          -- CANC_IN_2 action on place A_entrar_2(p_96)
          If p_96 > 0 Then
            exp_res := 1;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_IN_2 action on place cancela_aberta_2(p_88)
          If p_88 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_IN_2 action on place entrada_livre_2(p_72)
          If p_72 > 0 Then
            exp_res := 0;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_IN_2 action on place passou_canc_entrada_2(p_100)
          If p_100 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- Store CANC_IN_2 and check result range:
          If new_value < 0 Then s_CANC_IN_2 <= '0';
            Elsif new_value > 1 Then s_CANC_IN_2 <= '1';
            Else s_CANC_IN_2 <= conv_std_logic_vector(new_value,1)(0);
          End If;

          -- Signal CANC_OUT_2 default value:
          new_value := 0;

          -- CANC_OUT_2 action on place A_sair_2(p_127)
          If p_127 > 0 Then
            exp_res := 1;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_OUT_2 action on place canc_saida_aberta_2(p_123)
          If p_123 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_OUT_2 action on place passou_canc_saida_2(p_131)
          If p_131 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- CANC_OUT_2 action on place saida_livre_1(p_36)
          If p_36 > 0 Then
            exp_res := 0;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- Store CANC_OUT_2 and check result range:
          If new_value < 0 Then s_CANC_OUT_2 <= '0';
            Elsif new_value > 1 Then s_CANC_OUT_2 <= '1';
            Else s_CANC_OUT_2 <= conv_std_logic_vector(new_value,1)(0);
          End If;

          -- Signal piso1 default value:
          new_value := 0;

          -- piso1 action on place Piso_1(p_164)
          If p_164 > 0 Then
            exp_res := p_164;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- Store piso1 and check result range:
          If new_value < 0 Then s_piso1 <= 0;
            Elsif new_value > 8 Then s_piso1 <= 8;
            Else s_piso1 <= new_value;
          End If;

          -- Signal piso2 default value:
          new_value := 0;

          -- piso2 action on place piso_2(p_172)
          If p_172 > 0 Then
            exp_res := p_172;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- Store piso2 and check result range:
          If new_value < 0 Then s_piso2 <= 0;
            Elsif new_value > 8 Then s_piso2 <= 8;
            Else s_piso2 <= new_value;
          End If;

          -- Signal PERIGO default value:
          new_value := 0;

          -- PERIGO action on place contramao_UP(p_184)
          If p_184 > 0 Then
            exp_res := 1;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- PERIGO action on place contramao_down(p_268)
          If p_268 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- PERIGO action on place marcha_atras_1(p_203)
          If p_203 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- PERIGO action on place marcha_atras_2(p_213)
          If p_213 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- PERIGO action on place marcha_atras_3(p_220)
          If p_220 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- PERIGO action on place marcha_atras_4(p_246)
          If p_246 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- PERIGO action on place marcha_atras_5(p_257)
          If p_257 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- Store PERIGO and check result range:
          If new_value < 0 Then s_PERIGO <= '0';
            Elsif new_value > 1 Then s_PERIGO <= '1';
            Else s_PERIGO <= conv_std_logic_vector(new_value,1)(0);
          End If;

          -- Signal parque_cheio default value:
          new_value := 0;

          -- parque_cheio action on place lugares_ocupados(p_14)
          If p_14 > 0 Then
            exp_res := 1;
            If (p_14 = 8)
              Then new_value := exp_res;
            End If;
          End If;

          -- Store parque_cheio and check result range:
          If new_value < 0 Then s_parque_cheio <= '0';
            Elsif new_value > 1 Then s_parque_cheio <= '1';
            Else s_parque_cheio <= conv_std_logic_vector(new_value,1)(0);
          End If;

          -- Signal rampa1_ocupada default value:
          new_value := 0;

          -- rampa1_ocupada action on place IN_rampa_UP_1(p_168)
          If p_168 > 0 Then
            exp_res := 1;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- rampa1_ocupada action on place IN_rampa_UP_2(p_192)
          If p_192 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- rampa1_ocupada action on place IN_rampa_UP_3(p_196)
          If p_196 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- Store rampa1_ocupada and check result range:
          If new_value < 0 Then s_rampa1_ocupada <= '0';
            Elsif new_value > 1 Then s_rampa1_ocupada <= '1';
            Else s_rampa1_ocupada <= conv_std_logic_vector(new_value,1)(0);
          End If;

          -- Signal rampa2_ocupada default value:
          new_value := 0;

          -- rampa2_ocupada action on place IN_RAMPA_DOWN_2(p_233)
          If p_233 > 0 Then
            exp_res := 1;
            If (TRUE)
              Then new_value := exp_res;
            End If;
          End If;

          -- rampa2_ocupada action on place IN_RAMPA_DOWN_3(p_235)
          If p_235 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- rampa2_ocupada action on place IN_rampa_DOWN_1(p_177)
          If p_177 > 0 Then
            exp_res := 1;
            If (TRUE) and
               (ABS(exp_res - 0) > ABS(new_value - 0))
              Then new_value := exp_res;
            End If;
          End If;

          -- Store rampa2_ocupada and check result range:
          If new_value < 0 Then s_rampa2_ocupada <= '0';
            Elsif new_value > 1 Then s_rampa2_ocupada <= '1';
            Else s_rampa2_ocupada <= conv_std_logic_vector(new_value,1)(0);
          End If;

        End If;
      End If;
    End PROCESS;

    CANC_IN_1 <= s_CANC_IN_1;
    lugares_livres <= s_lugares_livres;
    lugares_preenchidos <= s_lugares_preenchidos;
    CANC_OUT_1 <= s_CANC_OUT_1;
    CANC_IN_2 <= s_CANC_IN_2;
    CANC_OUT_2 <= s_CANC_OUT_2;
    piso1 <= s_piso1;
    piso2 <= s_piso2;
    PERIGO <= s_PERIGO;
    parque_cheio <= s_parque_cheio;
    rampa1_ocupada <= s_rampa1_ocupada;
    rampa2_ocupada <= s_rampa2_ocupada;

End Structural;